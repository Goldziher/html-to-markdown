/* auto-generated by NAPI-RS */

export enum HeadingStyle {
  /** Underlined style (=== for h1, --- for h2) */
  Underlined = "Underlined",
  /** ATX style (# for h1, ## for h2, etc.) */
  Atx = "Atx",
  /** ATX closed style (# title #) */
  AtxClosed = "AtxClosed",
}

export enum ListIndentType {
  Spaces = "Spaces",
  Tabs = "Tabs",
}

export enum WhitespaceMode {
  Normalized = "Normalized",
  Strict = "Strict",
}

export enum NewlineStyle {
  /** Two spaces at end of line */
  Spaces = "Spaces",
  /** Backslash at end of line */
  Backslash = "Backslash",
}

export enum CodeBlockStyle {
  /** Indented code blocks (4 spaces) - CommonMark default */
  Indented = "Indented",
  /** Fenced code blocks with backticks (```) */
  Backticks = "Backticks",
  /** Fenced code blocks with tildes (~~~) */
  Tildes = "Tildes",
}

export enum HighlightStyle {
  /** ==text== */
  DoubleEqual = "DoubleEqual",
  /** <mark>text</mark> */
  Html = "Html",
  /** **text** */
  Bold = "Bold",
  /** Plain text (no formatting) */
  None = "None",
}

export enum PreprocessingPreset {
  Minimal = "Minimal",
  Standard = "Standard",
  Aggressive = "Aggressive",
}

export interface PreprocessingOptions {
  /** Enable preprocessing */
  enabled?: boolean;
  /** Preprocessing preset */
  preset?: PreprocessingPreset;
  /** Remove navigation elements */
  removeNavigation?: boolean;
  /** Remove form elements */
  removeForms?: boolean;
}

export interface ConversionOptions {
  /** Heading style */
  headingStyle?: HeadingStyle;
  /** List indentation type */
  listIndentType?: ListIndentType;
  /** List indentation width (spaces) */
  listIndentWidth?: number;
  /** Bullet characters for unordered lists */
  bullets?: string;
  /** Symbol for strong/emphasis (* or _) */
  strongEmSymbol?: string;
  /** Escape asterisks in text */
  escapeAsterisks?: boolean;
  /** Escape underscores in text */
  escapeUnderscores?: boolean;
  /** Escape misc markdown characters */
  escapeMisc?: boolean;
  /** Escape all ASCII punctuation */
  escapeAscii?: boolean;
  /** Default code language */
  codeLanguage?: string;
  /** Use autolinks for bare URLs */
  autolinks?: boolean;
  /** Add default title if none exists */
  defaultTitle?: boolean;
  /** Use <br> in tables instead of spaces */
  brInTables?: boolean;
  /** Enable spatial table reconstruction in hOCR documents */
  hocrSpatialTables?: boolean;
  /** Highlight style for <mark> elements */
  highlightStyle?: HighlightStyle;
  /** Extract metadata from HTML */
  extractMetadata?: boolean;
  /** Whitespace handling mode */
  whitespaceMode?: WhitespaceMode;
  /** Strip newlines from HTML before processing */
  stripNewlines?: boolean;
  /** Enable text wrapping */
  wrap?: boolean;
  /** Text wrap width */
  wrapWidth?: number;
  /** Treat block elements as inline */
  convertAsInline?: boolean;
  /** Subscript symbol */
  subSymbol?: string;
  /** Superscript symbol */
  supSymbol?: string;
  /** Newline style */
  newlineStyle?: NewlineStyle;
  /** Code block style */
  codeBlockStyle?: CodeBlockStyle;
  /** Elements where images should remain as markdown */
  keepInlineImagesIn?: Array<string>;
  /** Preprocessing options */
  preprocessing?: PreprocessingOptions;
  /** Source encoding (informational) */
  encoding?: string;
  /** Enable debug mode with diagnostic warnings */
  debug?: boolean;
  /** List of HTML tags to strip */
  stripTags?: Array<string>;
}

/**
 * Convert HTML to Markdown
 *
 * @param html - The HTML string to convert
 * @param options - Optional conversion options
 * @returns The converted Markdown string
 *
 * @example
 * ```typescript
 * import { convert } from '@html-to-markdown/node';
 *
 * const html = '<h1>Hello World</h1>';
 * const markdown = convert(html);
 * console.log(markdown); // # Hello World
 * ```
 */
export function convert(
  html: string,
  options?: ConversionOptions | undefined | null,
): string;
