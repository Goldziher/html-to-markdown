/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * Convert HTML to Markdown
 *
 * # Arguments
 *
 * * `html` - The HTML string to convert
 * * `options` - Optional conversion options
 *
 * # Example
 *
 * ```javascript
 * const { convert } = require('html-to-markdown');
 *
 * const html = '<h1>Hello World</h1>';
 * const markdown = convert(html);
 * console.log(markdown); // # Hello World
 * ```
 */
export declare function convert(html: string, options?: JsConversionOptions | undefined | null): string;

/**
 * Convert HTML to Markdown while collecting inline images
 *
 * # Arguments
 *
 * * `html` - The HTML string to convert
 * * `options` - Optional conversion options
 * * `image_config` - Configuration for inline image extraction
 *
 * # Example
 *
 * ```javascript
 * const { convertWithInlineImages } = require('html-to-markdown');
 *
 * const html = '<img src="data:image/png;base64,..." alt="test">';
 * const result = convertWithInlineImages(html, null, {
 *   maxDecodedSizeBytes: 1024 * 1024,
 *   inferDimensions: true
 * });
 * console.log(result.markdown);
 * console.log(result.inlineImages.length);
 * ```
 */
export declare function convertWithInlineImages(
  html: string,
  options?: JsConversionOptions | undefined | null,
  imageConfig?: JsInlineImageConfig | undefined | null,
): JsHtmlExtraction;

/** Code block style */
export declare enum JsCodeBlockStyle {
  /** Indented code blocks (4 spaces) - CommonMark default */
  Indented = "Indented",
  /** Fenced code blocks with backticks (```) */
  Backticks = "Backticks",
  /** Fenced code blocks with tildes (~~~) */
  Tildes = "Tildes",
}

/** Main conversion options */
export interface JsConversionOptions {
  /** Heading style */
  headingStyle?: JsHeadingStyle;
  /** List indentation type */
  listIndentType?: JsListIndentType;
  /** List indentation width (spaces) */
  listIndentWidth?: number;
  /** Bullet characters for unordered lists */
  bullets?: string;
  /** Symbol for strong/emphasis (* or _) */
  strongEmSymbol?: string;
  /** Escape asterisks in text */
  escapeAsterisks?: boolean;
  /** Escape underscores in text */
  escapeUnderscores?: boolean;
  /** Escape misc markdown characters */
  escapeMisc?: boolean;
  /** Escape all ASCII punctuation */
  escapeAscii?: boolean;
  /** Default code language */
  codeLanguage?: string;
  /** Use autolinks for bare URLs */
  autolinks?: boolean;
  /** Add default title if none exists */
  defaultTitle?: boolean;
  /** Use <br> in tables instead of spaces */
  brInTables?: boolean;
  /** Enable spatial table reconstruction in hOCR documents */
  hocrSpatialTables?: boolean;
  /** Highlight style for <mark> elements */
  highlightStyle?: JsHighlightStyle;
  /** Extract metadata from HTML */
  extractMetadata?: boolean;
  /** Whitespace handling mode */
  whitespaceMode?: JsWhitespaceMode;
  /** Strip newlines from HTML before processing */
  stripNewlines?: boolean;
  /** Enable text wrapping */
  wrap?: boolean;
  /** Text wrap width */
  wrapWidth?: number;
  /** Treat block elements as inline */
  convertAsInline?: boolean;
  /** Subscript symbol */
  subSymbol?: string;
  /** Superscript symbol */
  supSymbol?: string;
  /** Newline style */
  newlineStyle?: JsNewlineStyle;
  /** Code block style */
  codeBlockStyle?: JsCodeBlockStyle;
  /** Elements where images should remain as markdown */
  keepInlineImagesIn?: Array<string>;
  /** Preprocessing options */
  preprocessing?: JsPreprocessingOptions;
  /** Source encoding (informational) */
  encoding?: string;
  /** Enable debug mode with diagnostic warnings */
  debug?: boolean;
  /** List of HTML tags to strip */
  stripTags?: Array<string>;
}

/** Heading style options */
export declare enum JsHeadingStyle {
  /** Underlined style (=== for h1, --- for h2) */
  Underlined = "Underlined",
  /** ATX style (# for h1, ## for h2, etc.) */
  Atx = "Atx",
  /** ATX closed style (# title #) */
  AtxClosed = "AtxClosed",
}

/** Highlight style for `<mark>` elements */
export declare enum JsHighlightStyle {
  /** ==text== */
  DoubleEqual = "DoubleEqual",
  /** <mark>text</mark> */
  Html = "Html",
  /** **text** */
  Bold = "Bold",
  /** Plain text (no formatting) */
  None = "None",
}

/** Result of HTML extraction with inline images */
export interface JsHtmlExtraction {
  /** Converted markdown */
  markdown: string;
  /** Extracted inline images */
  inlineImages: Array<JsInlineImage>;
  /** Warnings encountered during extraction */
  warnings: Array<JsInlineImageWarning>;
}

/** Inline image data */
export interface JsInlineImage {
  /** Raw image data */
  data: Buffer;
  /** Image format (png, jpeg, gif, etc.) */
  format: string;
  /** Generated or provided filename */
  filename?: string;
  /** Alt text / description */
  description?: string;
  /** Image dimensions (width, height) if available */
  dimensions?: Array<number>;
  /** Source type (img_data_uri or svg_element) */
  source: string;
  /** HTML attributes from the source element */
  attributes: Record<string, string>;
}

/** Inline image configuration */
export interface JsInlineImageConfig {
  /** Maximum decoded size in bytes (default: 5MB) */
  maxDecodedSizeBytes?: bigint;
  /** Filename prefix for generated filenames */
  filenamePrefix?: string;
  /** Capture inline SVG elements (default: true) */
  captureSvg?: boolean;
  /** Infer image dimensions (default: false) */
  inferDimensions?: boolean;
}

/** Warning about inline image processing */
export interface JsInlineImageWarning {
  /** Index of the image that caused the warning */
  index: number;
  /** Warning message */
  message: string;
}

/** List indentation type */
export declare enum JsListIndentType {
  Spaces = "Spaces",
  Tabs = "Tabs",
}

/** Newline style */
export declare enum JsNewlineStyle {
  /** Two spaces at end of line */
  Spaces = "Spaces",
  /** Backslash at end of line */
  Backslash = "Backslash",
}

/** HTML preprocessing options */
export interface JsPreprocessingOptions {
  /** Enable preprocessing */
  enabled?: boolean;
  /** Preprocessing preset */
  preset?: JsPreprocessingPreset;
  /** Remove navigation elements */
  removeNavigation?: boolean;
  /** Remove form elements */
  removeForms?: boolean;
}

/** Preprocessing preset levels */
export declare enum JsPreprocessingPreset {
  Minimal = "Minimal",
  Standard = "Standard",
  Aggressive = "Aggressive",
}

/** Whitespace handling mode */
export declare enum JsWhitespaceMode {
  Normalized = "Normalized",
  Strict = "Strict",
}
