name: Publish Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish (e.g., v2.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-crates:
    name: Publish Rust crates to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
          else
            tag=${GITHUB_REF#refs/tags/}
          fi
          version=${tag#v}
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Publishing version: $version"

      - name: Verify Cargo.toml version matches tag
        run: |
          cargo_version=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          tag_version="${{ steps.version.outputs.version }}"

          if [ "$cargo_version" != "$tag_version" ]; then
            echo "‚ùå Version mismatch!"
            echo "   Cargo.toml: $cargo_version"
            echo "   Git tag: $tag_version"
            exit 1
          fi
          echo "‚úÖ Version match: $cargo_version"

      - name: Publish html-to-markdown-rs (core library)
        if: ${{ !inputs.dry_run }}
        run: |
          echo "Publishing html-to-markdown-rs crate..."
          cargo publish -p html-to-markdown-rs --token ${{ secrets.CARGO_TOKEN }}

      - name: Wait for crates.io to index
        if: ${{ !inputs.dry_run }}
        run: |
          echo "Waiting 30s for crates.io to index..."
          sleep 30

      - name: Publish html-to-markdown-cli
        if: ${{ !inputs.dry_run }}
        run: |
          echo "Publishing html-to-markdown-cli crate..."
          cargo publish -p html-to-markdown-cli --token ${{ secrets.CARGO_TOKEN }}

      - name: Dry run - Skip crates.io publish
        if: ${{ inputs.dry_run }}
        run: |
          echo "üîç DRY RUN: Would publish:"
          echo "  - html-to-markdown-rs"
          echo "  - html-to-markdown-cli"

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Build wheels
        uses: ./.github/actions/build-wheels
        with:
          python-version: "3.13"

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Build CLI binary for sdist
        run: cargo build --release --package html-to-markdown-cli

      - name: Prepare sdist with CLI
        run: python scripts/prepare_wheel.py

      - name: Build sdist
        run: maturin sdist --out dist/

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "wheels-*"
          merge-multiple: true
          path: dist/

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: List artifacts
        run: |
          echo "üì¶ Packages to publish:"
          ls -lh dist/
          echo ""
          echo "Wheels: $(ls -1 dist/*.whl | wc -l)"
          echo "Sdist: $(ls -1 dist/*.tar.gz | wc -l)"

      - name: Publish to PyPI
        if: ${{ !inputs.dry_run }}
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Dry run - Skip PyPI publish
        if: ${{ inputs.dry_run }}
        run: |
          echo "üîç DRY RUN: Would publish to PyPI:"
          echo ""
          echo "Wheels:"
          ls -1 dist/*.whl
          echo ""
          echo "Source distribution:"
          ls -1 dist/*.tar.gz

  publish-npm-node:
    name: Publish @html-to-markdown/node to npm
    runs-on: ubuntu-latest
    needs: publish-crates
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Download NAPI artifacts from release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}"

          # Download all NAPI binaries from the release
          cd crates/html-to-markdown-node
          gh release download "$tag" --pattern "*.node" --dir . || echo "No .node files found in release"

      - name: Install dependencies
        working-directory: crates/html-to-markdown-node
        run: pnpm install

      - name: Publish to npm
        if: ${{ !inputs.dry_run }}
        working-directory: crates/html-to-markdown-node
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing @html-to-markdown/node..."
          pnpm publish --access public --no-git-checks

      - name: Dry run - Skip npm publish
        if: ${{ inputs.dry_run }}
        run: |
          echo "üîç DRY RUN: Would publish @html-to-markdown/node to npm"
          ls -la crates/html-to-markdown-node/*.node || echo "No .node files"

  publish-npm-wasm:
    name: Publish @html-to-markdown/wasm to npm
    runs-on: ubuntu-latest
    needs: publish-crates
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM (all targets)
        working-directory: crates/html-to-markdown-wasm
        run: |
          pnpm install
          pnpm run build:all

      - name: Publish to npm
        if: ${{ !inputs.dry_run }}
        working-directory: crates/html-to-markdown-wasm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing @html-to-markdown/wasm..."
          pnpm publish --access public --no-git-checks

      - name: Dry run - Skip npm publish
        if: ${{ inputs.dry_run }}
        run: |
          echo "üîç DRY RUN: Would publish @html-to-markdown/wasm to npm"
          ls -la crates/html-to-markdown-wasm/dist/

  verify:
    name: Verify publications
    needs: [publish-crates, publish-pypi, publish-npm-node, publish-npm-wasm]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
          else
            tag=${GITHUB_REF#refs/tags/}
          fi
          version=${tag#v}
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Wait for package availability
        run: |
          echo "Waiting 60s for packages to be available..."
          sleep 60

      - name: Verify crates.io publication
        run: |
          version="${{ steps.version.outputs.version }}"

          echo "üîç Checking html-to-markdown-rs on crates.io..."
          if cargo search html-to-markdown-rs | grep -q "html-to-markdown-rs = \"$version\""; then
            echo "‚úÖ html-to-markdown-rs $version found on crates.io"
          else
            echo "‚ö†Ô∏è  html-to-markdown-rs $version not yet indexed (may take a few minutes)"
          fi

          echo "üîç Checking html-to-markdown-cli on crates.io..."
          if cargo search html-to-markdown-cli | grep -q "html-to-markdown-cli = \"$version\""; then
            echo "‚úÖ html-to-markdown-cli $version found on crates.io"
          else
            echo "‚ö†Ô∏è  html-to-markdown-cli $version not yet indexed (may take a few minutes)"
          fi

      - name: Verify npm publication
        run: |
          version="${{ steps.version.outputs.version }}"

          echo "üîç Checking @html-to-markdown/node on npm..."
          sleep 30  # Give npm time to index
          if npm view @html-to-markdown/node@$version version 2>/dev/null; then
            echo "‚úÖ @html-to-markdown/node $version found on npm"
          else
            echo "‚ö†Ô∏è  @html-to-markdown/node $version not yet indexed (may take a few minutes)"
          fi

          echo "üîç Checking @html-to-markdown/wasm on npm..."
          if npm view @html-to-markdown/wasm@$version version 2>/dev/null; then
            echo "‚úÖ @html-to-markdown/wasm $version found on npm"
          else
            echo "‚ö†Ô∏è  @html-to-markdown/wasm $version not yet indexed (may take a few minutes)"
          fi

      - name: Display installation commands
        run: |
          version="${{ steps.version.outputs.version }}"

          echo ""
          echo "‚úÖ Published successfully!"
          echo ""
          echo "üì¶ Installation commands:"
          echo "  Node.js/Bun: npm install @html-to-markdown/node@$version"
          echo "  WASM:        npm install @html-to-markdown/wasm@$version"
          echo "  Python:      pip install html-to-markdown==$version"
          echo "  Rust CLI:    cargo install html-to-markdown-cli --version $version"
          echo "  Homebrew:    brew tap goldziher/tap && brew install html-to-markdown"
          echo ""
          echo "üîó Links:"
          echo "  npm (node):       https://www.npmjs.com/package/@html-to-markdown/node/v/$version"
          echo "  npm (wasm):       https://www.npmjs.com/package/@html-to-markdown/wasm/v/$version"
          echo "  Crates.io (lib):  https://crates.io/crates/html-to-markdown-rs/$version"
          echo "  Crates.io (CLI):  https://crates.io/crates/html-to-markdown-cli/$version"
          echo "  PyPI:             https://pypi.org/project/html-to-markdown/$version/"
