name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  rust-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy, llvm-tools-preview

      - name: Run Rust Tests
        env:
          RUST_BACKTRACE: full
        run: |
          echo "Running Rust tests with full debugging..."
          cargo test --release --no-default-features -vv -- --nocapture --test-threads=1

      - name: Check Rust Formatting
        if: matrix.os == 'ubuntu-latest'
        run: cargo fmt --check

      - name: Run Clippy
        if: matrix.os == 'ubuntu-latest'
        run: cargo clippy -- -D warnings

  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy, llvm-tools-preview

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: uv sync --all-extras
          shell: bash

      - name: Run Rust Checks
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings

      - name: Install prek
        run: |
          uv tool install prek
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Load Cached Prek Dependencies
        id: cached-prek-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/prek/
          key: prek|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Prek
        run: prek run --show-diff-on-failure --color=always --all-files

  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy, llvm-tools-preview

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: uv sync --all-extras
          shell: bash

      - name: Build CLI Binary
        run: cargo build --release --package html-to-markdown-cli

      - name: Run Tests with Coverage
        run: |
          uv run coverage erase
          uv run pytest --cov=html_to_markdown --cov-report=lcov:coverage.lcov --cov-report=term-missing
          uv run coverage report --precision=2

      - name: Install cargo-llvm-cov for Rust Coverage
        run: cargo install cargo-llvm-cov

      - name: Generate Rust Coverage
        run: cargo llvm-cov --workspace --exclude html-to-markdown-py --all-features --lcov --output-path rust-coverage.lcov

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage.lcov
            rust-coverage.lcov
            .coverage
          retention-days: 7

  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10", "3.12", "3.14"]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy, llvm-tools-preview

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
              echo "Removing existing .venv directory on Windows"
              rm -rf .venv
            fi
            uv sync --all-extras
          shell: bash

      - name: Build CLI Binary
        run: cargo build --release --package html-to-markdown-cli

      - name: Test
        run: uv run pytest

  node-bindings:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup workspace
        uses: ./.github/actions/setup-node-workspace

      - name: Build NAPI-RS Bindings
        working-directory: crates/html-to-markdown-node
        run: pnpm run build

      - name: Test NAPI-RS Bindings
        working-directory: crates/html-to-markdown-node
        run: pnpm test

      - name: Run Rust Tests
        working-directory: crates/html-to-markdown-node
        run: cargo test

  wasm-bindings:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Setup workspace
        uses: ./.github/actions/setup-node-workspace

      - name: Build WASM (all targets)
        working-directory: crates/html-to-markdown-wasm
        run: pnpm run build:all

      - name: Test WASM
        working-directory: crates/html-to-markdown-wasm
        run: pnpm test

      - name: Run Rust Tests
        working-directory: crates/html-to-markdown-wasm
        run: cargo test
