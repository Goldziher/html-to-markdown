name: Release with Homebrew

on:
  push:
    tags:
      - v[0-9]+.*
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to build and release (e.g., v2.3.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: html-to-markdown
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: html-to-markdown
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: html-to-markdown.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: html-to-markdown
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: html-to-markdown

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI binary
        run: cargo build --release --target ${{ matrix.target }} --package html-to-markdown-cli

      - name: Create tar.gz for Unix-like systems
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf html-to-markdown-${{ matrix.target }}.tar.gz ${{ matrix.artifact_name }}
          mv html-to-markdown-${{ matrix.target }}.tar.gz ../../../

      - name: Create zip for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a -tzip html-to-markdown-${{ matrix.target }}.zip ${{ matrix.artifact_name }}
          mv html-to-markdown-${{ matrix.target }}.zip ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-to-markdown-${{ matrix.target }}
          path: |
            html-to-markdown-${{ matrix.target }}.tar.gz
            html-to-markdown-${{ matrix.target }}.zip

  build-napi:
    name: Build NAPI-RS ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.os }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: pnpm

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tools (Linux ARMv7)
        if: matrix.settings.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Install cross-compilation tools (Linux musl)
        if: contains(matrix.settings.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.settings.os }}-cargo-${{ matrix.settings.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build NAPI-RS bindings
        working-directory: crates/html-to-markdown-node
        run: |
          pnpm install
          pnpm run build --target ${{ matrix.settings.target }}

      - name: Upload NAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: napi-${{ matrix.settings.target }}
          path: crates/html-to-markdown-node/*.node
          retention-days: 1

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          cache: pnpm

      - name: Build WASM (all targets)
        working-directory: crates/html-to-markdown-wasm
        run: |
          pnpm install
          pnpm run build:all

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-bindings
          path: |
            crates/html-to-markdown-wasm/dist/
            crates/html-to-markdown-wasm/dist-node/
            crates/html-to-markdown-wasm/dist-web/
          retention-days: 1

  release:
    name: Create Release
    needs: [build, build-napi, build-wasm]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
          else
            tag=${GITHUB_REF#refs/tags/}
          fi
          version=${tag#v}
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ steps.version.outputs.tag }}"

          # Check if release already exists
          if gh release view "$tag" >/dev/null 2>&1; then
            echo "Release $tag already exists, deleting to recreate..."
            gh release delete "$tag" --yes --cleanup-tag
          fi

          # Create release
          gh release create "$tag" \
            --title "Release $tag" \
            --notes "$(cat <<'EOF'
          ## What's Changed

          See the [CHANGELOG](https://github.com/Goldziher/html-to-markdown/blob/main/CHANGELOG.md) for full details.

          ## Installation

          ### Node.js / Bun
          ```bash
          npm install @html-to-markdown/node
          ```

          ### Deno / Browsers
          ```bash
          npm install @html-to-markdown/wasm
          ```

          ### Python (PyPI)
          ```bash
          pip install html-to-markdown
          ```

          ### Homebrew
          ```bash
          brew tap goldziher/tap
          brew install html-to-markdown
          ```

          ### Rust/Cargo
          ```bash
          cargo install html-to-markdown-cli
          ```

          ### Direct Download
          Download the appropriate binary for your platform below.
          EOF
          )"

          # Upload CLI binaries
          for artifact in html-to-markdown-*/; do
            files=$(find "$artifact" -name "*.tar.gz" -o -name "*.zip")
            for file in $files; do
              gh release upload "$tag" "$file"
            done
          done

          # Upload NAPI binaries
          for artifact in napi-*/; do
            files=$(find "$artifact" -name "*.node")
            for file in $files; do
              gh release upload "$tag" "$file"
            done
          done

  homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: html-to-markdown
          formula-path: Formula/html-to-markdown.rb
          homebrew-tap: Goldziher/homebrew-tap
          download-url: https://github.com/Goldziher/html-to-markdown/archive/${{ needs.release.outputs.tag }}.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
