---
name: Publish Ruby Gem

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag to publish (e.g., v2.5.3)"
        required: true
        type: string
      dry_run:
        description: "Dry run (skip actual publishing)"
        required: false
        type: boolean
        default: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gem_version.outputs.version }}
      exists: ${{ steps.gem_check.outputs.exists }}
      dry_run: ${{ github.event.inputs.dry_run || 'false' }}
      tag: ${{ github.event.inputs.tag }}
    steps:
      - name: Determine release version
        id: gem_version
        run: |
          tag="${{ github.event.inputs.tag }}"
          version="${tag#v}"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Check RubyGems for existing release
        id: gem_check
        env:
          VERSION: ${{ steps.gem_version.outputs.version }}
        run: |
          python - <<'PY' >> "$GITHUB_OUTPUT"
          import json
          import os
          import sys
          import urllib.request

          version = os.environ["VERSION"]
          url = "https://rubygems.org/api/v1/versions/html-to-markdown.json"

          try:
              with urllib.request.urlopen(url) as resp:
                  data = json.load(resp)
          except Exception as exc:
              print(f"::warning::failed to query RubyGems ({exc})", file=sys.stderr)
              exists = False
          else:
              exists = any(entry.get("number") == version for entry in data)
              message = "already published" if exists else "not found"
              print(f"::notice::html-to-markdown {version} {message} on RubyGems", file=sys.stderr)

          print(f"exists={'true' if exists else 'false'}")
          PY

      - name: Summary
        run: |
          echo "version: ${{ steps.gem_version.outputs.version }}" >> "$GITHUB_STEP_SUMMARY"
          echo "exists: ${{ steps.gem_check.outputs.exists }}" >> "$GITHUB_STEP_SUMMARY"
          echo "dry_run: ${{ github.event.inputs.dry_run || 'false' }}" >> "$GITHUB_STEP_SUMMARY"

  build-gem:
    needs: prepare
    if: needs.prepare.outputs.exists != 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: linux
            build_source_gem: true
          - os: macos-14
            label: macos-arm64
          - os: macos-13
            label: macos-x86_64
          - os: windows-latest
            label: windows-x64
    runs-on: ${{ matrix.os }}
    env:
      RB_SYS_CARGO_PROFILE: release
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ format('refs/tags/{0}', needs.prepare.outputs.tag) }}
          fetch-depth: 0
          persist-credentials: false

      - name: Remove cached CLI binaries
        shell: bash
        run: rm -f crates/html-to-markdown-rb/lib/bin/html-to-markdown*

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install MSYS2 toolchain
        if: runner.os == 'Windows'
        shell: pwsh
        run: ridk exec pacman -S --needed --noconfirm base-devel mingw-w64-ucrt-x86_64-toolchain

      - name: Install Rust GNU toolchain
        if: runner.os == 'Windows'
        shell: pwsh
        run: rustup toolchain install stable-gnu --profile minimal --no-self-update

      - name: Configure bindgen sysroot (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: echo "BINDGEN_EXTRA_CLANG_ARGS=--target=x86_64-pc-windows-gnu --sysroot=${RI_DEVKIT//\\/\/}$MSYSTEM_PREFIX" >> "$GITHUB_ENV"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler: "2.5.12"
          bundler-cache: false

      - name: Install Ruby gems (Unix)
        if: runner.os != 'Windows'
        working-directory: crates/html-to-markdown-rb
        run: bundle _2.5.12_ install --jobs 4 --retry 3

      - name: Install Ruby gems (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $workspace = ridk exec bash -lc "cygpath -au '$env:GITHUB_WORKSPACE'"
          $crate = "$workspace/crates/html-to-markdown-rb"
          ridk exec bash -lc "cd $crate && export RUSTUP_TOOLCHAIN=stable-gnu CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ && bundle _2.5.12_ install --jobs 4 --retry 3"

      - name: Build ruby platform gem (source)
        if: matrix.build_source_gem
        working-directory: crates/html-to-markdown-rb
        run: |
          bundle _2.5.12_ exec rake clean
          bundle _2.5.12_ exec rake build

      - name: Build native gem (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ruby scripts/prepare_ruby_gem.rb
          cd crates/html-to-markdown-rb
          bundle _2.5.12_ exec rake native:html-to-markdown gem

      - name: Build native gem (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $workspace = ridk exec bash -lc "cygpath -au '$env:GITHUB_WORKSPACE'"
          ridk exec bash -lc "cd $workspace && export RUSTUP_TOOLCHAIN=stable-gnu && ruby scripts/prepare_ruby_gem.rb"
          $crate = "$workspace/crates/html-to-markdown-rb"
          ridk exec bash -lc "cd $crate && export RUSTUP_TOOLCHAIN=stable-gnu CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ && bundle _2.5.12_ exec rake native:html-to-markdown gem"

      - name: Collect gems
        shell: bash
        run: |
          mkdir -p artifacts
          shopt -s nullglob
          gems=(crates/html-to-markdown-rb/pkg/html-to-markdown-*.gem)
          if [ ${#gems[@]} -eq 0 ]; then
            echo "No gem artifacts were produced" >&2
            exit 1
          fi
          cp "${gems[@]}" artifacts/

      - name: Upload gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: gem-${{ matrix.label }}
          path: artifacts/*.gem

  publish:
    needs:
      - prepare
      - build-gem
    if: needs.prepare.outputs.exists != 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - name: Download gem artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: gem-*
          path: dist
          merge-multiple: true

      - name: List packaged gems
        run: ls -R dist

      - name: Configure trusted publishing credentials
        if: needs.prepare.outputs.dry_run != 'true'
        uses: rubygems/configure-rubygems-credentials@v1.0.0

      - name: Publish gems
        if: needs.prepare.outputs.dry_run != 'true'
        working-directory: dist
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          gems=($(ls html-to-markdown-*.gem | sort))
          if [ ${#gems[@]} -eq 0 ]; then
            echo "No gems found to publish" >&2
            exit 1
          fi
          for gem in "${gems[@]}"; do
            echo "Pushing ${gem}"
            gem push "${gem}"
          done

      - name: Dry-run summary
        if: needs.prepare.outputs.dry_run == 'true'
        working-directory: dist
        shell: bash
        run: |
          echo "Dry run requested; gems ready for publishing:" >> "$GITHUB_STEP_SUMMARY"
          ls -1 html-to-markdown-*.gem >> "$GITHUB_STEP_SUMMARY"
