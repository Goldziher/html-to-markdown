version: "3"

tasks:
  setup:
    desc: "Install dependencies with uv and build Rust components"
    cmds:
      - uv sync --all-extras
      - prek install && prek install --hook-type commit-msg

  update:
    desc: "Update Python and Rust dependencies"
    cmds:
      - uv run uv-bump
      - cargo upgrade --incompatible
      - uv sync --all-extras --upgrade
      - prek autoupdate

  test:python:
    desc: "Run Python tests with pytest"
    cmds:
      - uv run pytest

  test:cov:
    desc: "Run Python tests with coverage"
    cmds:
      - uv run pytest --cov=html_to_markdown --cov-report=term-missing

  test:rust:
    desc: "Run Rust tests"
    cmds:
      - cargo test --release --no-default-features --workspace --exclude html-to-markdown-rb

  cov:rust:
    desc: "Generate Rust code coverage report (requires cargo-llvm-cov)"
    cmds:
      - cargo llvm-cov --all-features --workspace --exclude html-to-markdown-py --exclude html-to-markdown-rb --lcov --output-path rust-coverage.lcov
      - echo "Rust coverage report generated at rust-coverage.lcov"
      - cargo llvm-cov --all-features --summary-only

  cov:python:
    desc: "Generate Python code coverage report"
    cmds:
      - uv run pytest --cov=html_to_markdown --cov-report=lcov:coverage.lcov --cov-report=term
      - echo "Python coverage report generated at coverage.lcov"

  cov:all:
    desc: "Generate both Rust and Python coverage reports"
    cmds:
      - task: cov:rust
      - task: cov:python

  test:
    desc: "Run Rust, Python, and Ruby tests"
    cmds:
      - task: test:rust
      - task: test:python
      - task: test:ruby

  lint:
    desc: "Lint Python code with ruff/prek and Rust code with clippy/fmt"
    cmds:
      - prek run --all-files

  fmt:
    desc: "Format Python and Rust code"
    cmds:
      - cargo fmt
      - prek run ruff-format --all-files

  build:
    desc: "Build Rust components for development"
    cmds:
      - uv sync --all-extras

  build:debug:
    desc: "Build Rust components in debug mode (without optimization)"
    cmds:
      - uv pip install --no-build-isolation --config-settings=build-args="--profile dev" -e .

  build:cli:
    desc: "Build CLI binary"
    cmds:
      - cargo build --release --package html-to-markdown-cli

  build:node:
    desc: "Build Node.js native bindings with NAPI-RS"
    dir: crates/html-to-markdown-node
    cmds:
      - pnpm run build

  build:wasm:
    desc: "Build WebAssembly bindings with wasm-bindgen"
    dir: crates/html-to-markdown-wasm
    cmds:
      - pnpm run build:all

  build:ts:
    desc: "Build TypeScript package (library + CLI)"
    dir: packages/html-to-markdown-ts
    cmds:
      - pnpm run build
      - pnpm run build:cli

  build:js:
    desc: "Build all JavaScript/TypeScript packages (node, wasm, ts)"
    cmds:
      - task: build:node
      - task: build:wasm
      - task: build:ts

  build:demo:
    desc: "Build and update the GitHub Pages demo"
    cmds:
      - ./scripts/build-demo.sh

  serve:demo:
    desc: "Serve the GitHub Pages demo locally"
    dir: docs
    cmds:
      - python3 -m http.server 8000

  build:wheel-prep:
    desc: "Prepare CLI binary for wheel packaging"
    cmds:
      - uv run scripts/prepare_wheel.py

  bench:
    desc: "Run Wikipedia document benchmarks"
    cmds:
      - uv run pytest tests/benchmark_wikipedia_test.py::TestWikipediaConversion --benchmark-only -v

  bench:all:
    desc: "Run all benchmarks including scalability tests"
    cmds:
      - uv run pytest tests/benchmark_wikipedia_test.py --benchmark-only -v

  bench:rust:
    desc: "Run Rust benchmarks with criterion"
    cmds:
      - cargo bench --package html-to-markdown

  bench:python:
    desc: "Run Python benchmarks only"
    cmds:
      - uv run pytest tests/benchmark_*.py --benchmark-only -v

  bench:full:
    desc: "Run all Rust and Python benchmarks"
    cmds:
      - task: bench:rust
      - task: bench:python

  test:node:
    desc: "Test Node.js bindings"
    dir: crates/html-to-markdown-node
    cmds:
      - pnpm test

  test:wasm:
    desc: "Test WebAssembly bindings"
    dir: crates/html-to-markdown-wasm
    cmds:
      - pnpm test

  test:ts:
    desc: "Test TypeScript package"
    dir: packages/html-to-markdown-ts
    cmds:
      - pnpm test

  test:js:
    desc: "Test all JavaScript/TypeScript packages"
    cmds:
      - task: test:node
      - task: test:wasm
      - task: test:ts

  test:ruby:
    desc: "Run Ruby specs for the Magnus bindings"
    cmds:
      - cargo build --release --package html-to-markdown-cli
      - cmd: PATH=/opt/homebrew/opt/ruby/bin:$PATH bundle install
        dir: crates/html-to-markdown-rb
      - cmd: PATH=/opt/homebrew/opt/ruby/bin:$PATH bundle exec rake spec
        dir: crates/html-to-markdown-rb

  clean:
    desc: "Clean build artifacts"
    cmds:
      - cargo clean
      - rm -rf target/
      - rm -rf .pytest_cache/
      - rm -rf htmlcov/
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - find crates packages -type d -name "dist" -exec rm -rf {} + 2>/dev/null || true
      - find crates packages -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true

  default:
    desc: "Show available tasks"
    cmds:
      - task --list
