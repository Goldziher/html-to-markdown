$schema: https://github.com/Goldziher/ai-rulez/schema/ai-rules-v2.schema.json
agents: []
commands: []
mcp_servers:
  - args:
      - mcp
    command: ai-rulez
    description: AI-Rulez MCP server for configuration management
    name: ai-rulez
metadata:
  description: High-performance HTML to Markdown converter. Rust crate with Python bindings (PyO3) and native CLI. Built with html5ever and ammonia, delivering 16-19x performance improvements over pure Python implementations.
  name: html-to-markdown
  version: 2.0.0
presets:
  - claude
rules:
  - content: Core conversion logic is in Rust. Python bindings expose the API via PyO3. Python code should be minimal wrappers around Rust functions. Rust code in crates/html-to-markdown/ implements the conversion engine using html5ever parser and ammonia sanitizer.
    name: Rust Core Architecture
    priority: critical
  - content: Use Python 3.10+ type hints for Python wrapper code. Rust code uses standard Rust types. Python type stubs in _rust.pyi provide type information for Rust bindings. Test both Python API and Rust implementation separately.
    name: Type Safety
    priority: critical
  - content: Python tests in tests/ validate API and integration. Rust tests in crates/ validate core logic. Use pytest for Python tests, cargo test for Rust tests. Maintain dual coverage with pytest-cov and cargo-llvm-cov.
    name: Dual Testing Strategy
    priority: critical
  - content: Use prek (not pre-commit) for pre-commit hooks. Format Python with ruff, Rust with cargo fmt. Lint Python with ruff, Rust with clippy. Run prek run --all-files to check everything. Install hooks with prek install && prek install --hook-type commit-msg.
    name: Code Quality with Prek
    priority: high
  - content: Use Taskfile for development tasks. Run task setup for initial setup, task update for dependency updates, task build for development builds. See Taskfile.yaml for all available commands.
    name: Task Runner Commands
    priority: high
  - content: Build Python package with maturin via uv pip install -e . (triggers maturin automatically). Maturin is configured in pyproject.toml [tool.maturin] section. Build CLI binary with cargo build --release --package html-to-markdown-cli.
    name: Build System
    priority: high
sections:
  - content: |-
      ## Prerequisites
      - Python 3.10+
      - Rust 1.75+ (stable)
      - uv package manager
      - Task (task runner)
      - prek (pre-commit hooks)

      ## Quick Setup
      ```bash
      # Clone and setup
      git clone https://github.com/Goldziher/html-to-markdown.git
      cd html-to-markdown
      task setup
      ```

      ## Running Tests
      ```bash
      # Python tests
      task test:python

      # Rust tests
      task test:rust

      # Both
      task test

      # With coverage
      task cov:all
      ```

      ## Development
      ```bash
      # Build Rust components
      task build

      # Format code
      task fmt

      # Run linters
      task lint

      # Run benchmarks
      task bench
      ```
    name: Developer Quick Start
    priority: high
  - content: |-
      ## Project Structure
      ```
      crates/
      ├── html-to-markdown/       # Core Rust library
      ├── html-to-markdown-py/    # Python bindings (PyO3)
      └── html-to-markdown-cli/   # Native CLI binary
      html_to_markdown/
      ├── api.py                  # Python API
      ├── options.py              # Configuration dataclasses
      ├── v1_compat.py           # v1 compatibility layer
      └── _rust.pyi              # Type stubs
      tests/                      # Python integration tests
      ```

      ## Rust Crates
      - **html-to-markdown**: Core conversion logic with html5ever
      - **html-to-markdown-py**: PyO3 bindings for Python
      - **html-to-markdown-cli**: Standalone CLI binary

      ## Python Package
      - Thin wrapper around Rust backend
      - v1 compatibility layer for backward compatibility
      - Type-safe dataclass configuration
    name: Architecture Overview
    priority: medium
  - content: |-
      ## CI Workflows
      - **ci.yaml**: Main CI with Rust tests, Python tests, coverage, linting
      - **test-wheels.yaml**: Build and test wheels across platforms

      ## Coverage
      - Rust: cargo-llvm-cov generates rust-coverage.lcov
      - Python: pytest-cov generates coverage.lcov
      - Upload both to coverage service

      ## Testing Matrix
      - Python: 3.10, 3.12, 3.14-dev
      - OS: Linux, macOS, Windows
      - Rust tests run on all platforms

      ## Prek Configuration
      - .prek-config.yaml contains hook configuration
      - Hooks run ruff, clippy, cargo fmt, mypy
      - Install with prek install (not pre-commit install)
    name: CI and Testing
    priority: medium
